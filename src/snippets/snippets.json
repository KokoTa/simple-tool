{
  "downloadByLink": {
    "prefix": "simple.downloadByLink",
    "body": [
      "function downloadByLink(url) {",
      "  const link = document.createElement(\"a\");",
      "  link.style.display = \"none\";",
      "  link.href = url;",
      "  link.target = \"_blank\";",
      "  document.body.appendChild(link);",
      "  link.click();",
      "  document.body.removeChild(link);",
      "}"
    ],
    "description": "downloadByLink"
  },
  "downloadToExcel": {
    "prefix": "simple.downloadToExcel",
    "body": [
      "function downloadToExcel(res, filename) {",
      "  const blob = new Blob([res], {",
      "    type: \"application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"",
      "  });",
      "  if (window.navigator.msSaveOrOpenBlob) {",
      "    navigator.msSaveBlob(blob);",
      "  } else {",
      "    const link = document.createElement(\"a\");",
      "    const time = parseTime(new Date(), \"{y}-{m}-{d}\");",
      "    link.download = filename + time + \".xls\";",
      "    link.style.display = \"none\";",
      "    link.href = URL.createObjectURL(blob);",
      "    document.body.appendChild(link);",
      "    link.click();",
      "    document.body.removeChild(link);",
      "  }",
      "};"
    ],
    "description": "downloadToExcel"
  },
  "dynamicImportJS": {
    "prefix": "simple.dynamicImportJS",
    "body": [
      "function dynamicImportJS(url, callback) {",
      "  const isExist = document.querySelector(\"$1\");",
      "  if (!isExist) {",
      "    const script = document.createElement(\"script\");",
      "    script.src = url;",
      "    script.id = \"$2\";",
      "    document.body.appendChild(script);",
      "    script.onload = () => {",
      "      if (callback) callback();",
      "    };",
      "  } else {",
      "    if (callback) callback();",
      "  }",
      "}"
    ],
    "description": "dynamicImportJS"
  },
  "byteLength": {
    "prefix": "simple.byteLength",
    "body": [
      "function byteLength(str) {",
      "  // returns the byte length of an utf8 string",
      "  let s = str.length",
      "  for (var i = str.length - 1; i >= 0; i--) {",
      "    const code = str.charCodeAt(i)",
      "    if (code > 0x7f && code <= 0x7ff) s++",
      "    else if (code > 0x7ff && code <= 0xffff) s += 2",
      "    if (code >= 0xdc00 && code <= 0xdfff) i--",
      "  }",
      "  return s",
      "}"
    ],
    "description": "byteLength"
  },
  "getIEVersion": {
    "prefix": "simple.getIEVersion",
    "body": [
      "function getIEVersion() {",
      "  var userAgent = navigator.userAgent",
      "  var isLessIE11 =",
      "    userAgent.indexOf('compatible') > -1 && userAgent.indexOf('MSIE') > -1",
      "  var isEdge = userAgent.indexOf('Edge') > -1 && !isLessIE11",
      "  var isIE11 =",
      "    userAgent.indexOf('Trident') > -1 && userAgent.indexOf('rv:11.0') > -1",
      "  if (isLessIE11) {",
      "    var IEReg = new RegExp('MSIE (\\\\d+\\\\.\\\\d+);')",
      "    IEReg.test(userAgent)",
      "    var IEVersionNum = parseFloat(RegExp['$1'])",
      "    if (IEVersionNum === 7) {",
      "      return 7",
      "    } else if (IEVersionNum === 8) {",
      "      return 8",
      "    } else if (IEVersionNum === 9) {",
      "      return 9",
      "    } else if (IEVersionNum === 10) {",
      "      return 10",
      "    } else {",
      "      return 6",
      "    }",
      "  } else if (isEdge) {",
      "    return 'edge'",
      "  } else if (isIE11) {",
      "    return 11",
      "  } else {",
      "    return -1",
      "  }",
      "}"
    ],
    "description": "getIEVersion"
  },
  "getBrowserInfo": {
    "prefix": "simple.getBrowserInfo",
    "body": [
      "const isPC = () => {",
      "  var userAgentInfo = navigator.userAgent",
      "  var Agents = [",
      "    'Android',",
      "    'iPhone',",
      "    'SymbianOS',",
      "    'Windows Phone',",
      "    'iPad',",
      "    'iPod'",
      "  ]",
      "  var flag = true",
      "  for (var v = 0; v < Agents.length; v++) {",
      "    if (userAgentInfo.indexOf(Agents[v]) > 0) {",
      "      flag = false",
      "      break",
      "    }",
      "  }",
      "  return flag",
      "}",
      "",
      "const isChrome = () => {",
      "  return (",
      "    !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime)",
      "  )",
      "}",
      "",
      "const isFirefox = () => {",
      "  return typeof InstallTrigger !== 'undefined'",
      "}",
      "",
      "const getChromeVersion = () => {",
      "  var raw = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)",
      "  return raw ? parseInt(raw[2], 10) : false",
      "}",
      "",
      "const getFirefoxVersion = () => {",
      "  var raw = navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)",
      "  return raw ? parseInt(raw[2], 10) : false",
      "}"
    ],
    "description": "getBrowserInfo"
  },
  "openWindow": {
    "prefix": "simple.openWindow",
    "body": [
      "function openWindow(url, title, w, h) {",
      "  // Fixes dual-screen position                            Most browsers       Firefox",
      "  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left",
      "  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top",
      "",
      "  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width",
      "  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height",
      "",
      "  const left = ((width / 2) - (w / 2)) + dualScreenLeft",
      "  const top = ((height / 2) - (h / 2)) + dualScreenTop",
      "  const newWindow = window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left)",
      "",
      "  // Puts focus on the newWindow",
      "  if (window.focus) {",
      "    newWindow.focus()",
      "  }",
      "}"
    ],
    "description": "openWindow"
  },
  "vue3Template": {
    "prefix": "simple.vue3Template",
    "body": [
      "<template>",
      "  <div class=\"wrap\">",
      "",
      "  </div>",
      "</template>",
      "",
      "<script setup>",
      "",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>",
      ""
    ],
    "description": "vue3Template"
  }
}